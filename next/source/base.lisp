;;; base.lisp --- main entry point into Next

(in-package :next)

(defun run ()
  (map nil 'funcall *deferred-variables*)
  (ensure-directories-exist (xdg-data-home))
  (initialize-default-key-bindings)
  ;; load the user configuration if it exists
  (load *init-file-path* :if-does-not-exist nil)
  (initialize-bookmark-db)
  (initialize-history-db)
  ;; create the interface object
  (setf *interface* (make-instance 'remote-interface))
  (start *interface*))
  ;; create the default buffers
  ;; (setf *minibuffer* (make-instance 'buffer :name "minibuffer" :mode (minibuffer-mode)))
  ;; (set-visible-active-buffer (generate-new-buffer "default" (document-mode)))
  ;; (set-url *start-page-url*)

(defun initialize-default-key-bindings ()
  (define-key *global-map* (kbd "C-x C-c") '(lambda () (kill *interface*)))
  (define-key *global-map* (kbd "C-x b") 'switch-buffer)
  (define-key *global-map* (kbd "C-x k") 'delete-buffer)
  (define-key *global-map* (kbd "M-l") 'set-url-new-buffer)
  (define-key *global-map* (kbd "S-b k") 'bookmark-delete)
  (define-key *global-map* (kbd "C-t") 'make-visible-new-buffer)
  (define-key *global-map* (kbd "S-b u") 'bookmark-url)
  (define-key *global-map* (kbd "C-x w") 'delete-active-buffer)
  (define-key *global-map* (kbd "S-h v") 'variable-inspect)
  (define-key *global-map* (kbd "S-h c") 'command-inspect)
  (define-key *global-map* (kbd "C-o") 'load-file)
  (define-key *global-map* (kbd "S-h s") 'start-swank)
  (define-key *global-map* (kbd "C-y") '(lambda () (paste *interface*)))
  (define-key *global-map* (kbd "C-w") '(lambda () (cut *interface*)))
  (define-key *global-map* (kbd "M-w") '(lambda () (copy *interface*)))
  (define-key *minibuffer-mode-map* (kbd "RETURN") #'(lambda () (return-input (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-RETURN") #'(lambda () (return-immediate (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-g") #'(lambda () (cancel-input (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "Escape") #'(lambda () (cancel-input (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-n") '(lambda () (minibuffer-select-next *interface*)))
  (define-key *minibuffer-mode-map* (kbd "C-p") '(lambda () (minibuffer-select-previous *interface*)))
  (define-key *document-mode-map* (kbd "M-f") 'history-forwards-query)
  (define-key *document-mode-map* (kbd "M-b") 'history-backwards)
  (define-key *document-mode-map* (kbd "C-g") 'go-anchor)
  (define-key *document-mode-map* (kbd "M-g") 'go-anchor-new-buffer)
  (define-key *document-mode-map* (kbd "S-g") 'go-anchor-new-buffer-focus)
  (define-key *document-mode-map* (kbd "C-f") 'history-forwards)
  (define-key *document-mode-map* (kbd "C-b") 'history-backwards)
  (define-key *document-mode-map* (kbd "C-p") 'scroll-up)
  (define-key *document-mode-map* (kbd "C-n") 'scroll-down)
  (define-key *document-mode-map* (kbd "C-x C-=") 'zoom-in-page)
  (define-key *document-mode-map* (kbd "C-x C-HYPHEN") 'zoom-out-page)
  (define-key *document-mode-map* (kbd "C-x C-0") 'unzoom-page)
  (define-key *document-mode-map* (kbd "C-l") 'set-url-current-buffer)
  (define-key *document-mode-map* (kbd "S-b o") 'set-url-from-bookmark)
  (define-key *document-mode-map* (kbd "S-b s") 'bookmark-current-page)
  (define-key *document-mode-map* (kbd "S-b g") 'bookmark-anchor)
  (define-key *document-mode-map* (kbd "C-[") 'switch-buffer-previous)
  (define-key *document-mode-map* (kbd "C-]") 'switch-buffer-next)
  (define-key *document-mode-map* (kbd "S-s s") 'add-search-boxes)
  (define-key *document-mode-map* (kbd "S-s n") 'next-search-hint)
  (define-key *document-mode-map* (kbd "S-s p") 'previous-search-hint)
  (define-key *document-mode-map* (kbd "S-s k") 'remove-search-hints)
  (define-key *document-mode-map* (kbd "C-.") 'jump-to-heading)
  (define-key *document-mode-map* (kbd "M->") 'scroll-to-bottom)
  (define-key *document-mode-map* (kbd "M-<") 'scroll-to-top))
