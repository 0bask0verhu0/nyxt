;;; base.lisp --- main entry point into Next

(in-package :next)


(defun handle-malformed-cli-arg (condition)
  (format t "Error parsing argument ~a: ~a.~&" (opts:option condition) condition)
  (opts:describe)
  (uiop:quit))

(defun parse-cli-args ()
  "Parse command line arguments."
  (opts:define-opts
    (:name :help
           :description "Print this help and exit."
           :short #\h
           :long "help")
    (:name :verbose
           :short #\v
           :long "verbose"
           :description "Print debugging information to stdout."))

  (handler-bind ((opts:unknown-option #'handle-malformed-cli-arg)
                 (opts:missing-arg #'handle-malformed-cli-arg)
                 (opts:arg-parser-failed #'handle-malformed-cli-arg))
    (opts:get-opts)))

(defun start ()
  (map nil 'funcall *deferred-variables*)
  (ensure-directories-exist (xdg-data-home))
  (initialize-default-key-bindings)
  ;; load the user configuration if it exists
  (load *init-file-path* :if-does-not-exist nil)
  (initialize-bookmark-db)
  (initialize-history-db)
  ;; create the interface object
  (setf *interface* (make-instance 'remote-interface))
  (start-interface *interface*)
  ;; initialize default state
  (setf *minibuffer*
        (make-instance 'buffer
                       :name "minibuffer"
                       :mode (minibuffer-mode)))
  (let ((window (window-make *interface*))
        (buffer (buffer-make *interface*)))
    (setf (name buffer) "default")
    (setf (mode buffer) (document-mode))
    (window-set-active-buffer *interface* window buffer)))

(defun initialize-default-key-bindings ()
  (define-key *global-map* (kbd "C-x C-c") '(lambda () (kill-interface *interface*)))
  (define-key *global-map* (kbd "C-x b") 'switch-buffer)
  (define-key *global-map* (kbd "C-x k") 'delete-buffer)
  (define-key *global-map* (kbd "M-l") 'set-url-new-buffer)
  (define-key *global-map* (kbd "S-b k") 'bookmark-delete)
  (define-key *global-map* (kbd "C-t") 'make-visible-new-buffer)
  (define-key *global-map* (kbd "S-b u") 'bookmark-url)
  (define-key *global-map* (kbd "C-x w") 'delete-active-buffer)
  (define-key *global-map* (kbd "S-h v") 'variable-inspect)
  (define-key *global-map* (kbd "S-h c") 'command-inspect)
  (define-key *global-map* (kbd "C-o") 'load-file)
  (define-key *global-map* (kbd "S-h s") 'start-swank)
  (define-key *global-map* (kbd "C-y") '(lambda () (paste *interface*)))
  (define-key *global-map* (kbd "C-w") '(lambda () (cut *interface*)))
  (define-key *global-map* (kbd "M-w") '(lambda () (copy *interface*)))
  (define-key *global-map* (kbd "C-x 5 3") #'(lambda () (print (window-active *interface*))))
  (define-key *global-map* (kbd "C-x 5 2") 'make-window)
  (define-key *global-map* (kbd "C-x 5 0") 'delete-window)
  (define-key *minibuffer-mode-map* (kbd "RETURN") #'(lambda () (return-input (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-RETURN") #'(lambda () (return-immediate (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-g") #'(lambda () (cancel-input (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "Escape") #'(lambda () (cancel-input (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-n") #'(lambda () (select-next (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-p") #'(lambda () (select-previous (mode *minibuffer*))))
  (define-key *document-mode-map* (kbd "M-f") 'history-forwards-query)
  (define-key *document-mode-map* (kbd "M-b") 'history-backwards)
  (define-key *document-mode-map* (kbd "C-g") 'go-anchor)
  (define-key *document-mode-map* (kbd "M-g") 'go-anchor-new-buffer)
  (define-key *document-mode-map* (kbd "S-g") 'go-anchor-new-buffer-focus)
  (define-key *document-mode-map* (kbd "C-f") 'history-forwards)
  (define-key *document-mode-map* (kbd "C-b") 'history-backwards)
  (define-key *document-mode-map* (kbd "C-p") 'scroll-up)
  (define-key *document-mode-map* (kbd "C-n") 'scroll-down)
  (define-key *document-mode-map* (kbd "C-x C-=") 'zoom-in-page)
  (define-key *document-mode-map* (kbd "C-x C-HYPHEN") 'zoom-out-page)
  (define-key *document-mode-map* (kbd "C-x C-0") 'unzoom-page)
  (define-key *document-mode-map* (kbd "C-l") 'set-url-current-buffer)
  (define-key *document-mode-map* (kbd "S-b o") 'set-url-from-bookmark)
  (define-key *document-mode-map* (kbd "S-b s") 'bookmark-current-page)
  (define-key *document-mode-map* (kbd "S-b g") 'bookmark-anchor)
  (define-key *document-mode-map* (kbd "C-[") 'switch-buffer-previous)
  (define-key *document-mode-map* (kbd "C-]") 'switch-buffer-next)
  (define-key *document-mode-map* (kbd "S-s s") 'add-search-boxes)
  (define-key *document-mode-map* (kbd "S-s n") 'next-search-hint)
  (define-key *document-mode-map* (kbd "S-s p") 'previous-search-hint)
  (define-key *document-mode-map* (kbd "S-s k") 'remove-search-hints)
  (define-key *document-mode-map* (kbd "C-.") 'jump-to-heading)
  (define-key *document-mode-map* (kbd "M->") 'scroll-to-bottom)
  (define-key *document-mode-map* (kbd "M-<") 'scroll-to-top)
  ;;; define self-insert commands for minibuffer
  (define-key *minibuffer-mode-map* (kbd "C-f") #'(lambda () (cursor-forwards (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-b") #'(lambda () (cursor-backwards (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-d") #'(lambda () (delete-forwards (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "BACKSPACE") #'(lambda () (delete-backwards (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-a") #'(lambda () (cursor-beginning (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "C-e") #'(lambda () (cursor-end (mode *minibuffer*))))
  (define-key *minibuffer-mode-map* (kbd "a") #'(lambda () (self-insert (mode *minibuffer*) "a")))
  (define-key *minibuffer-mode-map* (kbd "b") #'(lambda () (self-insert (mode *minibuffer*) "b")))
  (define-key *minibuffer-mode-map* (kbd "c") #'(lambda () (self-insert (mode *minibuffer*) "c")))
  (define-key *minibuffer-mode-map* (kbd "d") #'(lambda () (self-insert (mode *minibuffer*) "d")))
  (define-key *minibuffer-mode-map* (kbd "e") #'(lambda () (self-insert (mode *minibuffer*) "e")))
  (define-key *minibuffer-mode-map* (kbd "f") #'(lambda () (self-insert (mode *minibuffer*) "f")))
  (define-key *minibuffer-mode-map* (kbd "g") #'(lambda () (self-insert (mode *minibuffer*) "g")))
  (define-key *minibuffer-mode-map* (kbd "h") #'(lambda () (self-insert (mode *minibuffer*) "h")))
  (define-key *minibuffer-mode-map* (kbd "i") #'(lambda () (self-insert (mode *minibuffer*) "i")))
  (define-key *minibuffer-mode-map* (kbd "j") #'(lambda () (self-insert (mode *minibuffer*) "j")))
  (define-key *minibuffer-mode-map* (kbd "k") #'(lambda () (self-insert (mode *minibuffer*) "k")))
  (define-key *minibuffer-mode-map* (kbd "l") #'(lambda () (self-insert (mode *minibuffer*) "l")))
  (define-key *minibuffer-mode-map* (kbd "m") #'(lambda () (self-insert (mode *minibuffer*) "m")))
  (define-key *minibuffer-mode-map* (kbd "n") #'(lambda () (self-insert (mode *minibuffer*) "n")))
  (define-key *minibuffer-mode-map* (kbd "o") #'(lambda () (self-insert (mode *minibuffer*) "o")))
  (define-key *minibuffer-mode-map* (kbd "p") #'(lambda () (self-insert (mode *minibuffer*) "p")))
  (define-key *minibuffer-mode-map* (kbd "q") #'(lambda () (self-insert (mode *minibuffer*) "q")))
  (define-key *minibuffer-mode-map* (kbd "r") #'(lambda () (self-insert (mode *minibuffer*) "r")))
  (define-key *minibuffer-mode-map* (kbd "s") #'(lambda () (self-insert (mode *minibuffer*) "s")))
  (define-key *minibuffer-mode-map* (kbd "t") #'(lambda () (self-insert (mode *minibuffer*) "t")))
  (define-key *minibuffer-mode-map* (kbd "u") #'(lambda () (self-insert (mode *minibuffer*) "u")))
  (define-key *minibuffer-mode-map* (kbd "v") #'(lambda () (self-insert (mode *minibuffer*) "v")))
  (define-key *minibuffer-mode-map* (kbd "w") #'(lambda () (self-insert (mode *minibuffer*) "w")))
  (define-key *minibuffer-mode-map* (kbd "x") #'(lambda () (self-insert (mode *minibuffer*) "x")))
  (define-key *minibuffer-mode-map* (kbd "y") #'(lambda () (self-insert (mode *minibuffer*) "y")))
  (define-key *minibuffer-mode-map* (kbd "z") #'(lambda () (self-insert (mode *minibuffer*) "z")))
  (define-key *minibuffer-mode-map* (kbd ":") #'(lambda () (self-insert (mode *minibuffer*) ":")))
  (define-key *minibuffer-mode-map* (kbd "/") #'(lambda () (self-insert (mode *minibuffer*) "/")))
  (define-key *minibuffer-mode-map* (kbd ".") #'(lambda () (self-insert (mode *minibuffer*) ".")))
  (define-key *minibuffer-mode-map* (kbd "SPACE") #'(lambda () (self-insert (mode *minibuffer*) " "))))
